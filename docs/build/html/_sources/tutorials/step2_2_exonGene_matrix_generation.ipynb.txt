{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generate Exon Gene h5ad and Select Highly Variable Genes\n",
    "\n",
    "Ensure that the exon gene count table is ready. This section will process the exon gene count table and select highly variable genes for downstream analysis.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import anndata\n",
    "from tqdm import tqdm\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "main_folder = \"./00_data_generation/\"\n",
    "\n",
    "# Define the folder where the exon gene count table is stored\n",
    "exongene_folder = os.path.join(main_folder, \"03_exon_star\")\n",
    "\n",
    "# Define your study name (update this for your specific study)\n",
    "study_name = \"STUDY\"\n",
    "\n",
    "# Define the full path for the output file\n",
    "output_directory = os.path.join(main_folder, \"final_data\")\n",
    "os.makedirs(output_directory, exist_ok=True)\n",
    "\n",
    "output = os.path.join(output_directory, \"ExonGene_\"+study_name+\".h5ad\")\n",
    "output_hvg = os.path.join(output_directory, \"ExonGene_hvg_\"+study_name+\".h5ad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "metadata = \"your_metaData.csv\"\n",
    "gtf_path = \"./Homo_sapiens.GRCh38.107.gtf\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd_gt = pd.read_csv(metadata, sep='\\t')\n",
    "pd_gt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd_gt.shape[1]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read exon Gene count table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Check if Cells in Metadata Have Corresponding Count Tables\n",
    "cnt_files = []\n",
    "for f in os.listdir(exongene_folder):\n",
    "    if f.endswith(\"count.txt\"):\n",
    "        if f.split(\".\")[0] in list(pd_gt[\"CB\"]):\n",
    "            cnt_files.append(f)\n",
    "if len(cnt_files) != pd_gt.shape[0]:\n",
    "    sys.exit(\"There is a mismatch between the metadata and the FeatureCounts results. Please check.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd_count = pd.DataFrame([])\n",
    "for i, f in enumerate(tqdm(cnt_files)):\n",
    "    _cb = f.split(\".\")[0]\n",
    "    pd_cb = pd.read_csv(exongene_folder+f, sep=\"\\t\", skiprows=1)\n",
    "    pd_cb.columns = [*pd_cb.columns[:-1], _cb]\n",
    "    pd_cb = pd_cb[[\"Geneid\", _cb]]\n",
    "    if i == 0:\n",
    "        pd_count = pd_cb\n",
    "    else:\n",
    "        pd_count= pd.merge(pd_count, pd_cb, left_on=[\"Geneid\"], right_on=[\"Geneid\"], how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd_count = pd_count.set_index(\"Geneid\", drop=False)\n",
    "pd_count.index.name=None\n",
    "pd_count_t = pd_count.drop('Geneid', axis=1).T\n",
    "pd_count_t = pd.merge(pd_gt, pd_count_t, left_on=\"CB\",right_index=True)\n",
    "pd_count_t.set_index('CB', drop=False, inplace=True)\n",
    "pd_count_t.index.name = None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### get gene name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "####complete function, may need slight modification based on your gtf format####\n",
    "def get_ens_dict(file_path):\n",
    "    with open(file_path) as f:\n",
    "        gtf = list(f)\n",
    "\n",
    "    gtf = [x for x in gtf if not x.startswith('#')]\n",
    "    gtf = [x for x in gtf if 'gene_id \"' in x and 'gene_name \"' in x]\n",
    "    if len(gtf) == 0:\n",
    "        print('you need to change gene_id \" and gene_name \" formats')\n",
    "    \n",
    "    gtf = list(map(lambda x: (x.split('gene_id \"')[1].split('\"')[0], x.split('gene_name \"')[1].split('\"')[0]), gtf))\n",
    "    gtf = dict(set(gtf))\n",
    "    return gtf\n",
    "\n",
    "gtf_dict = get_ens_dict(gtf_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd_count[\"GeneName\"] = pd_count[\"Geneid\"]\n",
    "pd_count = pd_count.replace({\"GeneName\": gtf_dict})\n",
    "pd_count.set_index(\"GeneName\", drop=False, inplace=True)\n",
    "pd_count.index.name=None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#conver to h5ad file\n",
    "## dataframe for annotating the observations = sample name\n",
    "obs = pd_count_t[pd_gt.columns]\n",
    "\n",
    "## dataframe for annotating the variables = geneid\n",
    "var = pd_count[[\"Geneid\", \"GeneName\"]]\n",
    "\n",
    "# # # ##the data matrix \n",
    "X = pd_count_t.iloc[:,pd_gt.shape[1]:].values\n",
    "adata = anndata.AnnData(X, obs=obs, var=var, dtype=np.float32)\n",
    "\n",
    "adata.write(os.path.join(output))\n",
    "adata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Highly Variable Genes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scanpy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read_h5ad(output)\n",
    "adata.var_names_make_unique()\n",
    "sc.pp.filter_genes(adata, min_cells=3)\n",
    "adata.var['mt'] = adata.var_names.str.startswith('MT-')  # annotate the group of mitochondrial genes as 'mt'\n",
    "sc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\n",
    "sc.pp.normalize_total(adata)\n",
    "sc.pp.log1p(adata)\n",
    "sc.pp.highly_variable_genes(adata, n_top_genes=5000)\n",
    "adata.raw = adata\n",
    "adata = adata[:, adata.var.highly_variable]\n",
    "adata.write(output_hvg)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dvaegpuEnv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "63853741b382d752231b1c5d52e3b0008b12756d38fa78fde3ed653960d562e0"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
